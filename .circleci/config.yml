version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.1.3
  aws-ecr: circleci/aws-ecr@9.0.4
  docker: circleci/docker@2.2.0
  jq: circleci/jq@3.0.0

commands:
  verify-version-in-docker-image:
    parameters:
      image:
        description: Image name to validate
        type: string
      version:
        description: Expected contents for /app/apollo/agent/version file
        type: string
    steps:
    - run:
        name: Verify version in Docker image
        command: |
          image_version=$(docker run --rm --entrypoint python << parameters.image >> apollo/agent/settings.py)
          if [ $image_version = "<< parameters.version >>" ]
            then exit 0
            else echo "Failed to find expected version, found: $image_version"; exit 1
          fi
  generate-version-number-dev:
    steps:
    - run:
        command: |
          PIPELINE_NUMBER=<< pipeline.number >>
          if git describe --tags --abbrev=0; then TAG=$(git describe --tags --abbrev=0); else exit 1; fi
          VERSION=${TAG#v}
          echo "NEXT_VERSION=$(echo "$VERSION" | awk 'BEGIN{FS=OFS="."} {$3+=1} 1')rc${PIPELINE_NUMBER}" >> $BASH_ENV
          source $BASH_ENV
        name: Generate dev version number
  generate-version-number-prod:
    steps:
    - run:
        command: |
          if git describe --tags --abbrev=0; then TAG=$(git describe --tags --abbrev=0); else exit 1; fi
          echo "VERSION_TAG=${TAG#v}" >> $BASH_ENV
          source $BASH_ENV
        name: Generate prod version number

jobs:
  build-ok:
    machine:
      image: ubuntu-2204:current
    steps:
      - run:
          name: Message
          command: |
            echo "OK"

  run-linter:
    docker:
      - image: cimg/python:3.11-node
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            python -m venv .venv
            . .venv/bin/activate
            pip install --no-cache-dir --upgrade pip
            pip install --no-cache-dir -r requirements.txt -r requirements-dev.txt -r requirements-cloudrun.txt -r requirements-lambda.txt -r requirements-azure.txt
      - run:
          name: 'Run black / pyright'
          command: |
            . .venv/bin/activate
            black --check .
            pyright

  run-test-docker:
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - docker/build:
          image: mcd/apollo-agent-tests
          extra_build_args: --target tests
          step-name: Run tests in docker build

  build-and-push:
    machine:
      image: ubuntu-2204:current
    parameters:
      docker_hub_repository:
        type: string
      code_version:
        type: string
    steps:
      - checkout
      - docker/check:
          use-docker-credentials-store: true
      - docker/build:
          step-name: Build generic image
          use-buildkit: true  # to build only the required stages
          extra_build_args: --target generic --build-arg code_version=<< parameters.code_version >> --build-arg build_number=<< pipeline.number >>
          image: montecarlodata/<< parameters.docker_hub_repository >>
          tag: latest-generic,<< parameters.code_version >>-generic
      - docker/build:
          step-name: Build cloudrun image
          use-buildkit: true # to build only the required stages
          extra_build_args: --target cloudrun --build-arg code_version=<< parameters.code_version >> --build-arg build_number=<< pipeline.number >>
          image: montecarlodata/<< parameters.docker_hub_repository >>
          tag: latest-cloudrun,<< parameters.code_version >>-cloudrun
      - docker/build:
          step-name: Build azure image
          use-buildkit: true # to build only the required stages
          extra_build_args: --target azure --build-arg code_version=<< parameters.code_version >> --build-arg build_number=<< pipeline.number >>
          image: montecarlodata/<< parameters.docker_hub_repository >>
          tag: latest-azure,<< parameters.code_version >>-azure
      - verify-version-in-docker-image:
          image: montecarlodata/<< parameters.docker_hub_repository >>:latest-generic
          version: << parameters.code_version >>,<< pipeline.number >>
      - verify-version-in-docker-image:
          image: montecarlodata/<< parameters.docker_hub_repository >>:latest-cloudrun
          version: << parameters.code_version >>,<< pipeline.number >>
      - verify-version-in-docker-image:
          image: montecarlodata/<< parameters.docker_hub_repository >>:latest-azure
          version: << parameters.code_version >>,<< pipeline.number >>
      - docker/push:
          image: montecarlodata/<< parameters.docker_hub_repository >>
          tag: latest-generic,<< parameters.code_version >>-generic,latest-cloudrun,<< parameters.code_version >>-cloudrun,latest-azure,<< parameters.code_version >>-azure

  build-and-push-lambda:
    machine:
      image: ubuntu-2204:current
    parameters:
      docker_hub_repository:
        type: string
      aws_ecr_repository:
        type: string
      code_version:
        type: string
    steps:
      - checkout
      - docker/check:
          use-docker-credentials-store: true
      - docker/build:
          step-name: Build lambda image
          use-buildkit: true # to build only the required stages
          extra_build_args: --target lambda --build-arg code_version=<< parameters.code_version >> --build-arg build_number=<< pipeline.number >>
          image: montecarlodata/<< parameters.docker_hub_repository >>
          tag: latest-lambda,<< parameters.code_version >>-lambda
      - run:
          name: Tag lambda image
          command: |
            docker tag montecarlodata/<< parameters.docker_hub_repository >>:<< parameters.code_version >>-lambda ${AWS_ECR_ACCOUNT_URL}/<< parameters.aws_ecr_repository >>:<< parameters.code_version >>
            docker tag montecarlodata/<< parameters.docker_hub_repository >>:latest-lambda ${AWS_ECR_ACCOUNT_URL}/<< parameters.aws_ecr_repository >>:latest
      - verify-version-in-docker-image:
          image: ${AWS_ECR_ACCOUNT_URL}/<< parameters.aws_ecr_repository >>:<< parameters.code_version >>
          version: << parameters.code_version >>,<< pipeline.number >>
      - docker/push:
          image: montecarlodata/<< parameters.docker_hub_repository >>
          tag: latest-lambda,<< parameters.code_version >>-lambda
      - aws-cli/setup:
          role_arn: "${AWS_ROLE_ARN}"
      - aws-ecr/ecr_login
      - aws-ecr/push_image:
          repo: << parameters.aws_ecr_repository >>
          tag: latest,<< parameters.code_version >>
  push-lambda-legacy-repo:
    machine:
      image: ubuntu-2204:current
    parameters:
      docker_hub_repository:
        type: string
      aws_ecr_repository:
        type: string
      code_version:
        type: string
    steps:
      - checkout
      - docker/pull:
          images: montecarlodata/<< parameters.docker_hub_repository >>:latest-lambda,montecarlodata/<< parameters.docker_hub_repository >>:<< parameters.code_version >>-lambda
      - run:
          name: Tag lambda image
          command: |
            docker tag montecarlodata/<< parameters.docker_hub_repository >>:<< parameters.code_version >>-lambda ${AWS_ECR_ACCOUNT_URL}/<< parameters.aws_ecr_repository >>:<< parameters.code_version >>
            docker tag montecarlodata/<< parameters.docker_hub_repository >>:latest-lambda ${AWS_ECR_ACCOUNT_URL}/<< parameters.aws_ecr_repository >>:latest
      - aws-ecr/ecr_login
      - aws-ecr/push_image:
          repo: << parameters.aws_ecr_repository >>
          tag: latest,<< parameters.code_version >>

  build-and-push-docs:
    docker:
      - image: python:3.11.7
    parameters:
      code_version:
        type: string
    steps:
      - checkout
      - aws-cli/install
      - aws-cli/setup:
          profile_name: default
      - run:
          name: Install dependencies
          command: |
            pip install virtualenv==20.13.0
      - run:
          name: Publish docs and invalidate the cloudfront cache
          command: make VERSION=<< parameters.code_version >> publish-docs

  update-and-validate-golden-agent:
    executor: aws-cli/default
    parameters:
      use_aws_cli:
        description: Use the AWS CLI to perform the update
        type: boolean
        default: false
      agent_uuid:
        description: UUID of the Agent
        type: string
      agent_version:
        description: The agent version installed, to check after the upgrade is complete
        type: string
      sleep_seconds:
        description: Seconds to wait after triggering the agent update and before checking for the new version
        type: string
        default: "0"
      image_repo:
        description: The image repository to use for the agent, pre-release-agent or agent
        type: string
        default: "agent"
      ecr_repo_name:
        description: The ECR repository to use for the AWS CLI update
        type: string
        default: "${AWS_AGENT_ECR_REPO_PROD}"
      ecr_repo_account:
        description: The AWS account to use for the ECR repo update
        type: string
        default: "${AWS_AGENT_ECR_ACCOUNT_PROD}"
    steps:
      - jq/install
      - run:
          name: Install dependencies
          command: |
            curl https://bootstrap.pypa.io/get-pip.py > get-pip.py
            python get-pip.py
            pip install --no-cache-dir --upgrade pip
            pip install --no-cache-dir montecarlodata
      - when:
          condition:
            equal: [ true, << parameters.use_aws_cli >> ]
          steps:
            - aws-cli/setup:
                role_arn: "${AWS_AGENT_ACCOUNT_ROLE_ARN}"
                profile_name: mcd
            - run:
                name: Trigger AWS agent stack update
                command: |
                  aws cloudformation update-stack --profile mcd --stack-name "${AWS_AGENT_STACK_NAME}" --use-previous-template --parameters "ParameterKey=ImageUri,ParameterValue=<< parameters.ecr_repo_account >>.dkr.ecr.*.amazonaws.com/<< parameters.ecr_repo_name >>:<< parameters.agent_version >>" --region ${AWS_AGENT_REGION} --capabilities CAPABILITY_IAM
            - run:
                name: Wait for update to complete
                command: |
                  aws cloudformation wait stack-update-complete --profile mcd --stack-name "${AWS_AGENT_STACK_NAME}" --region ${AWS_AGENT_REGION}
      - when:
          condition:
            not: << parameters.use_aws_cli >>
          steps:
            - run:
                name: Update agent
                command: |
                  export MCD_DEFAULT_API_ID=${MCD_SMOKE_TESTS_API_ID}
                  export MCD_DEFAULT_API_TOKEN=${MCD_SMOKE_TESTS_API_TOKEN}
                  export MCD_AGENT_IMAGE_REPO=<< parameters.image_repo >>
                  montecarlo agents upgrade --agent-id << parameters.agent_uuid >>
      - run:
          name: Run Agent Health
          command: |
            sleep << parameters.sleep_seconds >>
            export MCD_DEFAULT_API_ID=${MCD_SMOKE_TESTS_API_ID}
            export MCD_DEFAULT_API_TOKEN=${MCD_SMOKE_TESTS_API_TOKEN}
            AGENT_VERSION=`montecarlo agents health --agent-id << parameters.agent_uuid >> | grep -v "Agent health check" | jq -r '.version'`
            echo "Agent Version: $AGENT_VERSION"
            if [ $AGENT_VERSION = "<< parameters.agent_version >>" ]
                then exit 0
                else echo "Failed to find expected version (<< parameters.agent_version >>), found: $AGENT_VERSION"; exit 1
            fi
      - run:
          name: Run validations
          command: |
            export MCD_DEFAULT_API_ID=${MCD_SMOKE_TESTS_API_ID}
            export MCD_DEFAULT_API_TOKEN=${MCD_SMOKE_TESTS_API_TOKEN}
            montecarlo collectors run-validations --all-validations --agent-id << parameters.agent_uuid >>

workflows:
  version: 2

  build-and-deploy:
    jobs:
      - run-linter
      - run-test-docker:
          # run for all tags and branches, we need to add this so the job is available for build-and-push-prod
          filters:
            tags:
              only: /.*/
      - build-and-push:
          name: build-and-push-dev
          docker_hub_repository: pre-release-agent
          code_version: ${NEXT_VERSION}
          pre-steps:
            - checkout
            - generate-version-number-dev
          context:
            - docker
          requires:
            - run-linter
            - run-test-docker
          filters:
            branches:
              only:
                - dev
                - /.*\/pr-.*/
      - update-and-validate-golden-agent:
          name: gcp-dev-update-and-validate-golden-agent
          agent_uuid: ${MCD_AGENT_UUID_WITH_GCP_AGENT}
          agent_version: ${NEXT_VERSION}
          image_repo: pre-release-agent
          pre-steps:
            - checkout
            - generate-version-number-dev
          context:
            - mc-dev
          requires:
            - build-and-push-dev
          filters:
            branches:
              only:
                - dev
      - update-and-validate-golden-agent:
          name: az-dev-update-and-validate-golden-agent
          agent_uuid: ${MCD_AGENT_UUID_WITH_AZ_AGENT}
          agent_version: ${NEXT_VERSION}
          sleep_seconds: "120"
          image_repo: pre-release-agent
          pre-steps:
            - checkout
            - generate-version-number-dev
          context:
            - mc-dev
          requires:
            - build-and-push-dev
          filters:
            branches:
              only:
                - dev
      - update-and-validate-golden-agent:
          name: gcp-prod-update-and-validate-golden-agent-merge-queue
          agent_uuid: ${MCD_AGENT_UUID_WITH_GCP_AGENT}
          agent_version: ${NEXT_VERSION}
          image_repo: pre-release-agent
          pre-steps:
            - checkout
            - generate-version-number-dev
          context:
            - mc-prod
          requires:
            - build-and-push-dev
          filters:
            branches:
              only:
                - /.*\/pr-.*/
      - update-and-validate-golden-agent:
          name: az-prod-update-and-validate-golden-agent-merge-queue
          agent_uuid: ${MCD_AGENT_UUID_WITH_AZ_AGENT}
          agent_version: ${NEXT_VERSION}
          sleep_seconds: "120"
          image_repo: pre-release-agent
          pre-steps:
            - checkout
            - generate-version-number-dev
          context:
            - mc-prod
          requires:
            - build-and-push-dev
          filters:
            branches:
              only:
                - /.*\/pr-.*/
      - build-and-push-lambda:
          name: build-and-push-lambda-dev
          docker_hub_repository: pre-release-agent
          aws_ecr_repository: mcd-pre-release-agent
          code_version: ${NEXT_VERSION}
          pre-steps:
            - checkout
            - generate-version-number-dev
          context:
            - aether-dev
            - docker
          requires:
            - run-linter
            - run-test-docker
          filters:
            branches:
              only:
                - dev
                - /.*\/pr-.*/
      - update-and-validate-golden-agent:
          name: aws-dev-update-and-validate-golden-agent
          agent_uuid: ${MCD_AGENT_UUID_WITH_AWS_AGENT}
          agent_version: ${NEXT_VERSION}
          image_repo: pre-release-agent
          pre-steps:
            - checkout
            - generate-version-number-dev
          context:
            - mc-dev
          requires:
            - build-and-push-lambda-dev
          filters:
            branches:
              only:
                - dev
      - update-and-validate-golden-agent:
          name: aws-prod-update-and-validate-golden-agent-merge-queue
          use_aws_cli: true
          agent_uuid: ${MCD_AGENT_UUID_WITH_AWS_AGENT}
          agent_version: ${NEXT_VERSION}
          ecr_repo_name: "${AWS_AGENT_ECR_REPO_DEV}"
          ecr_repo_account: "${AWS_AGENT_ECR_ACCOUNT_DEV}"
          pre-steps:
            - checkout
            - generate-version-number-dev
          context:
            - mc-prod
          requires:
            - build-and-push-lambda-dev
          filters:
            branches:
              only:
                - /.*\/pr-.*/
      - push-lambda-legacy-repo:
          name: push-lambda-aws-dev
          docker_hub_repository: pre-release-agent
          aws_ecr_repository: mcd-pre-release-agent
          code_version: ${NEXT_VERSION}
          pre-steps:
            - checkout
            - generate-version-number-dev
          context:
            - aws-dev
            - docker
          requires:
            - build-and-push-lambda-dev
          filters:
            branches:
              only:
                - dev
      - build-and-push:
          name: build-and-push-prod
          docker_hub_repository: agent
          code_version: ${VERSION_TAG}
          pre-steps:
            - checkout
            - generate-version-number-prod
          context:
            - docker
          requires:
            - run-linter
            - run-test-docker
          filters: # run only for tags starting with v, don't run for branches
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - update-and-validate-golden-agent:
          name: gcp-prod-update-and-validate-golden-agent
          agent_uuid: ${MCD_AGENT_UUID_WITH_GCP_AGENT}
          agent_version: ${VERSION_TAG}
          pre-steps:
            - checkout
            - generate-version-number-prod
          context:
            - mc-prod
          requires:
            - build-and-push-prod
      - update-and-validate-golden-agent:
          name: az-prod-update-and-validate-golden-agent
          agent_uuid: ${MCD_AGENT_UUID_WITH_AZ_AGENT}
          agent_version: ${VERSION_TAG}
          sleep_seconds: "120"
          pre-steps:
            - checkout
            - generate-version-number-prod
          context:
            - mc-prod
          requires:
            - build-and-push-prod
      - build-and-push-lambda:
          name: build-and-push-lambda-prod
          docker_hub_repository: agent
          aws_ecr_repository: mcd-agent
          code_version: ${VERSION_TAG}
          pre-steps:
            - checkout
            - generate-version-number-prod
          context:
            - aether-prod
            - docker
          requires:
            - run-linter
            - run-test-docker
          filters: # run only for tags starting with v, don't run for branches
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - update-and-validate-golden-agent:
          name: aws-prod-update-and-validate-golden-agent
          use_aws_cli: true
          agent_uuid: ${MCD_AGENT_UUID_WITH_AWS_AGENT}
          agent_version: ${VERSION_TAG}
          pre-steps:
            - checkout
            - generate-version-number-prod
          context:
            - mc-prod
          requires:
            - build-and-push-lambda-prod
      - push-lambda-legacy-repo:
          name: push-lambda-aws-prod
          docker_hub_repository: agent
          aws_ecr_repository: mcd-agent
          code_version: ${VERSION_TAG}
          pre-steps:
            - checkout
            - generate-version-number-prod
          context:
            - aws-prod
            - docker
          requires:
            - build-and-push-lambda-prod
          filters: # run only for tags starting with v, don't run for branches
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build-and-push-docs:
          name: build-and-push-docs-dev
          code_version: ${NEXT_VERSION}
          pre-steps:
            - checkout
            - generate-version-number-dev
          context:
            - aws-dev
          requires:
            - run-linter
            - run-test-docker
          filters:
            branches:
              only:
                - dev
      - build-and-push-docs:
          name: build-and-push-docs-prod
          code_version: ${VERSION_TAG}
          pre-steps:
            - checkout
            - generate-version-number-prod
          context:
            - aws-prod
          requires:
            - run-linter
            - run-test-docker
          filters: # run only for tags starting with v, don't run for branches
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build-ok:
          # build ok mark for PRs
          name: build-ok
          requires:
            - run-linter
            - run-test-docker
          filters:
            branches:
              only:
                - main
                - dev
                - /.*\/pr-.*/
      - build-ok:
          # build ok mark for merge queue
          name: build-ok
          requires:
            - gcp-prod-update-and-validate-golden-agent-merge-queue
            - az-prod-update-and-validate-golden-agent-merge-queue
            - aws-prod-update-and-validate-golden-agent-merge-queue
          filters:
            branches:
              ignore:
                - /.*\/pr-.*/
