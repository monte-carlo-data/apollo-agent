version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.0.0
  aws-ecr: circleci/aws-ecr@9.0.4
  docker: circleci/docker@2.2.0

commands:
  verify-version-in-docker-image:
    parameters:
      image:
        description: Image name to validate
        type: string
      version:
        description: Expected contents for /app/apollo/agent/version file
        type: string
    steps:
    - run:
        name: Verify version in Docker image
        command: |
          image_version=$(docker run --rm --entrypoint python << parameters.image >> apollo/agent/settings.py)
          if [ $image_version = "<< parameters.version >>" ]
            then exit 0
            else echo "Failed to find expected version, found: $image_version"; exit 1
          fi

jobs:
  run-linter:
    docker:
      - image: cimg/python:3.11-node

    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            python -m venv .venv
            . .venv/bin/activate
            pip install --no-cache-dir --upgrade pip
            pip install --no-cache-dir -r requirements.txt -r requirements-dev.txt -r requirements-cloudrun.txt -r requirements-lambda.txt -r requirements-azure.txt
      - run:
          name: 'Run black / pyright'
          command: |
            . .venv/bin/activate
            black --check .
            pyright

  run-test-docker:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout
      - docker/build:
          image: mcd/apollo-agent-tests
          extra_build_args: --target tests
          step-name: Run tests in docker build

  build-and-push:
    machine:
      image: ubuntu-2004:202201-02
    parameters:
      docker_hub_repository:
        type: string
      code_version:
        type: string
    steps:
      - checkout
      - docker/check:
          use-docker-credentials-store: true
      - docker/build:
          step-name: Build generic image
          use-buildkit: true  # to build only the required stages
          extra_build_args: --target generic --build-arg code_version=<< parameters.code_version >> --build-arg build_number=<< pipeline.number >>
          image: montecarlodata/<< parameters.docker_hub_repository >>
          tag: latest-generic,<< parameters.code_version >>-generic
      - docker/build:
          step-name: Build cloudrun image
          use-buildkit: true # to build only the required stages
          extra_build_args: --target cloudrun --build-arg code_version=<< parameters.code_version >> --build-arg build_number=<< pipeline.number >>
          image: montecarlodata/<< parameters.docker_hub_repository >>
          tag: latest-cloudrun,<< parameters.code_version >>-cloudrun
      - docker/build:
          step-name: Build azure image
          use-buildkit: true # to build only the required stages
          extra_build_args: --target azure --build-arg code_version=<< parameters.code_version >> --build-arg build_number=<< pipeline.number >>
          image: montecarlodata/<< parameters.docker_hub_repository >>
          tag: latest-azure,<< parameters.code_version >>-azure
      - verify-version-in-docker-image:
          image: montecarlodata/<< parameters.docker_hub_repository >>:latest-generic
          version: << parameters.code_version >>,<< pipeline.number >>
      - verify-version-in-docker-image:
          image: montecarlodata/<< parameters.docker_hub_repository >>:latest-cloudrun
          version: << parameters.code_version >>,<< pipeline.number >>
      - verify-version-in-docker-image:
          image: montecarlodata/<< parameters.docker_hub_repository >>:latest-azure
          version: << parameters.code_version >>,<< pipeline.number >>
      - docker/push:
          image: montecarlodata/<< parameters.docker_hub_repository >>
          tag: latest-generic,<< parameters.code_version >>-generic,latest-cloudrun,<< parameters.code_version >>-cloudrun,latest-azure,<< parameters.code_version >>-azure

  build-and-push-lambda:
    machine:
      image: ubuntu-2004:202201-02
    parameters:
      docker_hub_repository:
        type: string
      aws_ecr_repository:
        type: string
      code_version:
        type: string
    steps:
      - checkout
      - docker/check:
          use-docker-credentials-store: true
      - docker/build:
          step-name: Build lambda image
          use-buildkit: true # to build only the required stages
          extra_build_args: --target lambda --build-arg code_version=<< parameters.code_version >> --build-arg build_number=<< pipeline.number >>
          image: montecarlodata/<< parameters.docker_hub_repository >>
          tag: latest-lambda,<< parameters.code_version >>-lambda
      - run:
          name: Tag lambda image
          command: |
            docker tag montecarlodata/<< parameters.docker_hub_repository >>:<< parameters.code_version >>-lambda ${AWS_ECR_ACCOUNT_URL}/<< parameters.aws_ecr_repository >>:<< parameters.code_version >>
      - verify-version-in-docker-image:
          image: ${AWS_ECR_ACCOUNT_URL}/<< parameters.aws_ecr_repository >>:<< parameters.code_version >>
          version: << parameters.code_version >>,<< pipeline.number >>
      - docker/push:
          image: montecarlodata/<< parameters.docker_hub_repository >>
          tag: latest-lambda,<< parameters.code_version >>-lambda
      - aws-ecr/ecr_login
      - aws-ecr/push_image:
          repo: << parameters.aws_ecr_repository >>
          tag: latest,<< parameters.code_version >>

  build-and-push-docs:
    docker:
      - image: python:3.11.7
    parameters:
      code_version:
        type: string
    steps:
      - checkout
      - aws-cli/install
      - aws-cli/setup:
          profile_name: default
      - run:
          name: Install dependencies
          command: |
            pip install virtualenv==20.13.0
      - run:
          name: Publish docs and invalidate the cloudfront cache
          command: make VERSION=<< parameters.code_version >> publish-docs

workflows:
  version: 2

  build-and-deploy:
    jobs:
      - run-linter
      - run-test-docker:
          # run for all tags and branches, we need to add this so the job is available for build-and-push-prod
          filters:
            tags:
              only: /.*/
      - build-and-push:
          name: build-and-push-dev
          docker_hub_repository: pre-release-agent
          code_version: ${NEXT_VERSION}
          pre-steps:
            - checkout
            - run:
                command: |
                  PIPELINE_NUMBER=<< pipeline.number >>
                  if git describe --tags --abbrev=0; then TAG=$(git describe --tags --abbrev=0); else exit 1; fi
                  VERSION=${TAG#v}
                  echo "NEXT_VERSION=$(echo "$VERSION" | awk 'BEGIN{FS=OFS="."} {$3+=1} 1')rc${PIPELINE_NUMBER}" >> $BASH_ENV
                  source $BASH_ENV
          context:
            - docker
          requires:
            - run-linter
            - run-test-docker
          filters:
            branches:
              only:
                - dev
      - build-and-push-lambda:
          name: build-and-push-lambda-dev
          docker_hub_repository: pre-release-agent
          aws_ecr_repository: mcd-pre-release-agent
          code_version: ${NEXT_VERSION}
          pre-steps:
            - checkout
            - run:
                command: |
                  PIPELINE_NUMBER=<< pipeline.number >>
                  if git describe --tags --abbrev=0; then TAG=$(git describe --tags --abbrev=0); else exit 1; fi
                  VERSION=${TAG#v}
                  echo "NEXT_VERSION=$(echo "$VERSION" | awk 'BEGIN{FS=OFS="."} {$3+=1} 1')rc${PIPELINE_NUMBER}" >> $BASH_ENV
                  source $BASH_ENV
          context:
            - aws-dev
            - docker
          requires:
            - run-linter
            - run-test-docker
          filters:
            branches:
              only:
                - dev
      - build-and-push:
          name: build-and-push-prod
          docker_hub_repository: agent
          code_version: ${VERSION_TAG}
          pre-steps:
            - checkout
            - run:
                command: |
                  if git describe --tags --abbrev=0; then TAG=$(git describe --tags --abbrev=0); else exit 1; fi
                  echo "VERSION_TAG=${TAG#v}" >> $BASH_ENV
                  source $BASH_ENV
          context:
            - docker
          requires:
            - run-linter
            - run-test-docker
          filters: # run only for tags starting with v, don't run for branches
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build-and-push-lambda:
          name: build-and-push-lambda-prod
          docker_hub_repository: agent
          aws_ecr_repository: mcd-agent
          code_version: ${VERSION_TAG}
          pre-steps:
            - checkout
            - run:
                command: |
                  if git describe --tags --abbrev=0; then TAG=$(git describe --tags --abbrev=0); else exit 1; fi
                  echo "VERSION_TAG=${TAG#v}" >> $BASH_ENV
                  source $BASH_ENV
          context:
            - aws-prod
            - docker
          requires:
            - run-linter
            - run-test-docker
          filters: # run only for tags starting with v, don't run for branches
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build-and-push-docs:
          name: build-and-push-docs-dev
          code_version: ${NEXT_VERSION}
          pre-steps:
            - checkout
            - run:
                command: |
                  PIPELINE_NUMBER=<< pipeline.number >>
                  if git describe --tags --abbrev=0; then TAG=$(git describe --tags --abbrev=0); else exit 1; fi
                  VERSION=${TAG#v}
                  echo "NEXT_VERSION=$(echo "$VERSION" | awk 'BEGIN{FS=OFS="."} {$3+=1} 1')rc${PIPELINE_NUMBER}" >> $BASH_ENV
                  source $BASH_ENV
          context:
            - aws-dev
          requires:
            - run-linter
            - run-test-docker
          filters:
            branches:
              only:
                - dev
      - build-and-push-docs:
          name: build-and-push-docs-prod
          code_version: ${VERSION_TAG}
          pre-steps:
            - checkout
            - run:
                command: |
                  if git describe --tags --abbrev=0; then TAG=$(git describe --tags --abbrev=0); else exit 1; fi
                  echo "VERSION_TAG=${TAG#v}" >> $BASH_ENV
                  source $BASH_ENV
          context:
            - aws-prod
          requires:
            - run-linter
            - run-test-docker
          filters: # run only for tags starting with v, don't run for branches
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/